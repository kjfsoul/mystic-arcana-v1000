{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/api/tarot/deck/[deckId]",
      "regex": "^/api/tarot/deck/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPdeckId": "nxtPdeckId"
      },
      "namedRegex": "^/api/tarot/deck/(?<nxtPdeckId>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/astrology/birth-chart",
      "regex": "^/astrology/birth\\-chart(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/astrology/birth\\-chart(?:/)?$"
    },
    {
      "page": "/astronomical-demo",
      "regex": "^/astronomical\\-demo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/astronomical\\-demo(?:/)?$"
    },
    {
      "page": "/auth/auth-code-error",
      "regex": "^/auth/auth\\-code\\-error(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/auth\\-code\\-error(?:/)?$"
    },
    {
      "page": "/auth/callback",
      "regex": "^/auth/callback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/callback(?:/)?$"
    },
    {
      "page": "/auth/reset-password",
      "regex": "^/auth/reset\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/reset\\-password(?:/)?$"
    },
    {
      "page": "/auth/update-password",
      "regex": "^/auth/update\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/update\\-password(?:/)?$"
    },
    {
      "page": "/debug-stars",
      "regex": "^/debug\\-stars(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/debug\\-stars(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/galaxy-test",
      "regex": "^/galaxy\\-test(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/galaxy\\-test(?:/)?$"
    },
    {
      "page": "/galaxy-view",
      "regex": "^/galaxy\\-view(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/galaxy\\-view(?:/)?$"
    },
    {
      "page": "/high-performance-stars",
      "regex": "^/high\\-performance\\-stars(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/high\\-performance\\-stars(?:/)?$"
    },
    {
      "page": "/legal/cookies",
      "regex": "^/legal/cookies(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/cookies(?:/)?$"
    },
    {
      "page": "/legal/disclaimer",
      "regex": "^/legal/disclaimer(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/disclaimer(?:/)?$"
    },
    {
      "page": "/legal/privacy",
      "regex": "^/legal/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/privacy(?:/)?$"
    },
    {
      "page": "/legal/terms",
      "regex": "^/legal/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/legal/terms(?:/)?$"
    },
    {
      "page": "/readings",
      "regex": "^/readings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/readings(?:/)?$"
    },
    {
      "page": "/simple-stars",
      "regex": "^/simple\\-stars(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/simple\\-stars(?:/)?$"
    },
    {
      "page": "/test",
      "regex": "^/test(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test(?:/)?$"
    },
    {
      "page": "/test-auth",
      "regex": "^/test\\-auth(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-auth(?:/)?$"
    },
    {
      "page": "/test-oauth",
      "regex": "^/test\\-oauth(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-oauth(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}