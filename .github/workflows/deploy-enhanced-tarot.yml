name: Deploy Enhanced Tarot Features

on:
  push:
    branches: [main, develop]
    paths:
      - "src/components/tarot/**"
      - "src/hooks/useTarotDeck.ts"
      - "src/app/api/tarot/**"
      - "src/app/embed/**"
      - "vercel.json"
  pull_request:
    branches: [main]
    paths:
      - "src/components/tarot/**"
      - "src/hooks/useTarotDeck.ts"
      - "src/app/api/tarot/**"

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint-and-test:
    name: Lint and Test Tarot Components
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --ext .ts,.tsx src/components/tarot/ src/hooks/useTarotDeck.ts

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Test Tarot API endpoints
        run: npm run test:tarot-api
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Test Enhanced Components
        run: npm run test -- --testPathPattern=tarot
        env:
          NODE_ENV: test

  build-and-preview:
    name: Build and Create Preview
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ”® Enhanced Tarot Preview')
            );

            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            const embedUrl = `${previewUrl}/embed/tarot?spread=three-card`;

            const body = `ðŸ”® **Enhanced Tarot Preview Deployed!**

            âœ¨ **Preview URLs:**
            - Main Tarot Experience: ${previewUrl}/tarot
            - Mobile Tarot Reader: ${previewUrl}/tarot?mobile=true
            - Social Media Embed: ${embedUrl}
            - API Test: ${previewUrl}/api/tarot/deck/00000000-0000-0000-0000-000000000001

            ðŸŽ´ **Features to Test:**
            - Enhanced shuffle animations with bioluminescence
            - Multiple spread layouts (single, 3-card, Celtic cross, etc.)
            - Mobile-optimized touch interactions
            - Social media sharing capabilities
            - Real-time Supabase deck data integration

            ðŸ“± **Mobile Testing:**
            Test on various devices and orientations. The embed URL is optimized for TikTok/Instagram integration.

            ðŸš€ **Performance:**
            - Cards load from Supabase API with 1-hour caching
            - Smooth 60fps animations on mobile devices
            - Progressive loading for large spreads

            _This preview will be available until the next deployment._`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy-prod
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          echo "ðŸš€ Production deployment complete!"
          echo "ðŸ”® Tarot Experience: ${{ steps.deploy-prod.outputs.production_url }}/tarot"
          echo "ðŸ“± Mobile Reader: ${{ steps.deploy-prod.outputs.production_url }}/tarot?mobile=true"
          echo "ðŸŽ´ Embed: ${{ steps.deploy-prod.outputs.production_url }}/embed/tarot"

          # Test critical endpoints
          curl -f "${{ steps.deploy-prod.outputs.production_url }}/api/tarot/deck/00000000-0000-0000-0000-000000000001" || exit 1
          echo "âœ… Tarot API is responding"

      - name: Update Status Check
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.deploy-prod.outputs.production_url }}',
              description: 'ðŸ”® Enhanced Tarot deployed successfully!',
              context: 'vercel/production'
            });

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ steps.deploy-prod.outputs.production_url }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30
